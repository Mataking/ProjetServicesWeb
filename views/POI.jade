block content
    head
        meta(name='viewport', content='initial-scale=1.0, user-scalable=no')
        meta(charset='utf-8')
        script(type='text/javascript', src='/javascripts/under_menu_display.js')
        link(rel='stylesheet', href='/stylesheets/style.css')
        title Places Searchbox

    body
        #mySidenav.sidenav
            a.closebtn(href='javascript:void(0)', onclick='closeNav()') Ã—
            #pic


input#pac-input.controls(type='text', placeholder='Search Box')

script(type='text/javascript', src='https://maps.googleapis.com/maps/api/js?key=AIzaSyBF9y6_whjHe2QDpkZXDxz29_zV3F7MBX0&libraries=places')

#map
script.
    var map;
    var geoJSON;
    var request;
    var gettingData = false;
    var openWeatherMapKey = "f6f0e3ae36a5a2e736d4d4ec323c527c"

    function initAutocomplete() {

        //infowindow = new google.maps.InfoWindow();

        var mapOptions = {
            zoom: 13,
            center: {lat: 47.56453, lng: 1.33456},
            mapTypeId: 'roadmap'
        };
        map = new google.maps.Map(document.getElementById('map'),
            mapOptions);

        // Add interaction listeners to make weather requests
        google.maps.event.addListener(map, 'idle', checkIfDataRequested);

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');

        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function () {
            searchBox.setBounds(map.getBounds());
        });

        var markers = [];

        console.log(markers + 'first');

        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function () {
            var places = searchBox.getPlaces();
            var marker;

            alert(JSON.stringify(places))
            console.log(places)

            if (places.length == 0) {
                return;
            }
            // Clear out the old markers.
            markers.forEach(function (marker) {
                console.log(marker + 'reinitialisation')
                marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();

            places.forEach(function (place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }

                var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                // Create a marker for each place.
                marker = new google.maps.Marker({
                    map: map,
                    icon: icon,
                    title: place.name +
                    '\n' + place.formatted_address,
                    position: place.geometry.location,
                    id: place.id
                });

                marker.addListener('click', function () {
                    var nom = place.name;
                    var adresse = place.formatted_address;
                    var tel = place.formatted_phone_number;
                    var note = place.rating;

                    alert(JSON.stringify(place))
                    infowindow.setContent([
                        nom,
                        adresse,
                        'tel : ' + tel,
                        'note : ' + note].join("<br />"));

                    infowindow.setOptions({
                        position: place.geometry.location,
                        pixelOffset: {
                            width: 0,
                            height: -15
                        }
                    });
                    infowindow.open(map, this);
                })

                markers.push(marker);

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });

        // Add interaction listeners to make weather requests
        google.maps.event.addListener(map, 'idle', checkIfDataRequested);


        // Sets up and populates the info window with details
        map.data.addListener('click', function (event) {
            infowindow.setContent(
                "<img src=" + event.feature.getProperty("icon") + ">"
                + "<br /><strong>" + event.feature.getProperty("city") + "</strong>"
                + "<br />" + event.feature.getProperty("temperature") + "&deg;C"
                + "<br />" + event.feature.getProperty("weather")
            );
            infowindow.setOptions({
                position: {
                    lat: event.latLng.lat(),
                    lng: event.latLng.lng()
                },
                pixelOffset: {
                    width: 0,
                    height: -15
                }
            });
            infowindow.open(map);
        });
    }

    var checkIfDataRequested = function () {
        // Stop extra requests being sent
        while (gettingData === true) {
            request.abort();
            gettingData = false;
        }
        getCoords();
    };
    // Get the coordinates from the Map bounds
    var getCoords = function () {
        var bounds = map.getBounds();
        var NE = bounds.getNorthEast();
        var SW = bounds.getSouthWest();
        getWeather(NE.lat(), NE.lng(), SW.lat(), SW.lng());
    };
    // Make the weather request
    var getWeather = function (northLat, eastLng, southLat, westLng) {
        gettingData = true;
        var requestString = "http://api.openweathermap.org/data/2.5/box/city?bbox="
            + westLng + "," + northLat + "," //left top
            + eastLng + "," + southLat + "," //right bottom
            + map.getZoom()
            + "&cluster=yes&format=json"
            + "&APPID=" + openWeatherMapKey;
        request = new XMLHttpRequest();
        request.onload = proccessResults;
        request.open("get", requestString, true);
        request.send();
    };
    // Take the JSON results and proccess them
    var proccessResults = function () {
        console.log(this);
        var results = JSON.parse(this.responseText);
        if (results.list.length > 0) {
            resetData();
            for (var i = 0; i < results.list.length; i++) {
                geoJSON.features.push(jsonToGeoJson(results.list[i]));
            }
            drawIcons(geoJSON);
        }
    };
    var infowindow = new google.maps.InfoWindow();
    // For each result that comes back, convert the data to geoJSON
    var jsonToGeoJson = function (weatherItem) {
        var feature = {
            type: "Feature",
            properties: {
                city: weatherItem.name,
                weather: weatherItem.weather[0].main,
                temperature: weatherItem.main.temp,
                min: weatherItem.main.temp_min,
                max: weatherItem.main.temp_max,
                humidity: weatherItem.main.humidity,
                pressure: weatherItem.main.pressure,
                windSpeed: weatherItem.wind.speed,
                windDegrees: weatherItem.wind.deg,
                windGust: weatherItem.wind.gust,
                icon: "http://openweathermap.org/img/w/"
                + weatherItem.weather[0].icon + ".png",
                coordinates: [weatherItem.coord.Lon, weatherItem.coord.Lat]
            },
            geometry: {
                type: "Point",
                coordinates: [weatherItem.coord.Lon, weatherItem.coord.Lat]
            }
        };
        // Set the custom marker icon
        map.data.setStyle(function (feature) {
            return {
                icon: {
                    url: feature.getProperty('icon'),
                    anchor: new google.maps.Point(25, 25)
                }
            };
        });
        // returns object
        return feature;
    };
    // Add the markers to the map
    var drawIcons = function (weather) {
        map.data.addGeoJson(geoJSON);
        // Set the flag to finished
        gettingData = false;
    };
    // Clear data layer and geoJSON
    var resetData = function () {
        geoJSON = {
            type: "FeatureCollection",
            features: []
        };
        map.data.forEach(function (feature) {
            map.data.remove(feature);
        });
    };
    google.maps.event.addDomListener(window, 'load', initAutocomplete());
