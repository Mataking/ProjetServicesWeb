block content
    head
        meta(name='viewport', content='initial-scale=1.0, user-scalable=no')
        meta(charset='utf-8')
        script(type='text/javascript', src='/javascripts/under_menu_display.js')

        link(rel='stylesheet', href='/stylesheets/style.css')
        title Places Searchbox

    body
        #mySidenav.sidenav
            a.closebtn(href='javascript:void(0)', onclick='closeNav()') ×
            #pic


input#pac-input.controls(type='text', placeholder='Search Box')
input#date.controls(type='date', max='2018-17-42', min='2018-02-13', name='the_date')
form
    select#heure.controls(name='nom', size='1')
        option
            | 00:00:00
        option
            | 03:00:00
        option
            | 06:00:00
        option
            | 09:00:00
        option(selected='')
            | 12:00:00
        option
            | 15:00:00
        option
            | 18:00:00
        option
            | 21:00:00

script(type='text/javascript', src='https://maps.googleapis.com/maps/api/js?key=AIzaSyBF9y6_whjHe2QDpkZXDxz29_zV3F7MBX0&libraries=places')

#map
script.
    var map;
    var geoJSON;
    var request;
    var gettingData = false;

    /** api key **/
    var openWeatherMapKey = "f6f0e3ae36a5a2e736d4d4ec323c527c"
    var test;
    var places;

    /** list des marqueurs qui seront affichés pour chaque poi **/
    var markers = [];

    /** list de la meteo pour chaque poi **/
    var meteoByPOI = [];

    var dateHeure;

    /** dependence python et nools **/
    var PythonShell = require('python-shell');
    var nools = require("nools");


    function initAutocomplete() {

        /** definis google map au first lancement **/
        var mapOptions = {
            zoom: 13,
            center: {lat: 47.56453, lng: 1.33456},
            mapTypeId: 'roadmap'
        };
        map = new google.maps.Map(document.getElementById('map'),
            mapOptions);

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');

        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function () {
            searchBox.setBounds(map.getBounds());
        });

        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function () {
            places = searchBox.getPlaces();
            dateHeure = document.getElementById('date').value + ' ' + document.getElementById('heure').value;

            if (places.length == 0) {
                return;
            }

            /** elimine tous les marqueurs **/
            markers.forEach(function (marker) {
                marker.setMap(null);
            });
            markers = [];

            /** pour chaque poi, recupère icone, location **/
            var bounds = new google.maps.LatLngBounds();

            /** associe chaque poi à sa meteo **/
            places.forEach(function (place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }

                var lat = place.geometry.location.lat();
                var lng = place.geometry.location.lng();

                /** récupération de la meteo pour chaque POI **/
                var requestString = "http://api.openweathermap.org/data/2.5/forecast?units=metric&lang=en&cnt=16&APPID=f6f0e3ae36a5a2e736d4d4ec323c527c&lat="+lat+"&lon="+lng;

                const request = new XMLHttpRequest();
                request.open("GET", requestString, false);
                request.send(null);

                /** association la meteo avec son POI **/
                test = request.responseText.substring(0, request.responseText.length - 1) + "," + JSON.stringify(place).substring(1, JSON.stringify(place).length);

                meteoByPOI.push(JSON.parse(test));
            });

            /** créer un marker pour chaque poi **/
            for(var i = 0; i < 20; i++)
            {
                var listweather = meteoByPOI[i];
                var weather;

                for (var pas = 0; pas < 16; pas++){
                    if(new String(listweather.list[pas].dt_txt).valueOf() == new String(dateHeure).valueOf())
                        weather = listweather.list[pas].weather[0].main;
                }

                /** Option - Tableau qui récupère les critères
                 * critère weather
                 * critère de date
                 * critère d'heure
                 * **/
                var options = {
                    args: [weather, dateHeure.split(" ")[0], dateHeure.split(" ")[1]]
                };

                /** récupère le script python qui interroge le fichier ruleML**/
                PythonShell.run('nools/open_xml.py', options, function (err, results) {
                    if (err) throw err;
                    //console.log(results);
                    //res.push(results[0])
                    //this.vr = results

                    /** parcours du fichier ruleML pour la transformation en nools **/
                    for (var j in results) {

                        /** message d'netrée pour nools **/
                        var Message = function (message) {
                            this.text = message;
                        };

                        var nok = ""
                        /** alimentation le flow de nools **/
                        var flow = nools.flow("Ruleml transform", function (flow) {

                            /** récupère l'ensemble des POI contenant le type voulu
                             *
                             * **/
                            flow.rule("Ruleml", [Message, "out", "out.text =~ /^" + results[j] + "/"], function (facts) {
                                //console.log(facts.out.text);
                                nok = "nok";
                            });

                        });

                        /** faire le test des règles dans nools **/
                        var session = flow.getSession();
                        var main_type = listweather.types[0];
                        var name_poi = listweather.name;
                        /** test si le POI respect la règle ou pas
                         *  transformer la variable d'entrée afin de respecter les règles nools
                         *  ex : roserai de Blois, type : park => "park roserai de blois"
                         * **/
                        session.assert(new Message(main_type+" "+name_poi));

                        /** si le POI match avec les règles, on ne l'affiche pas **/
                        if(session.match() === 'nok'){}
                        else{
                            creationmarker(places[i], bounds);
                            alert(listweather.name + 'OKKKKKK')
                        }

                    }
                });
            };

            map.fitBounds(bounds);
        });

        // Add interaction listeners to make weather requests
        google.maps.event.addListener(map, 'idle', checkIfDataRequested);

        // Sets up and populates the info window with details
        map.data.addListener('click', function (event) {
            infowindow.setContent(
                "<img src=" + event.feature.getProperty("icon") + ">"
                + "<br /><strong>" + event.feature.getProperty("city") + "</strong>"
                + "<br />" + event.feature.getProperty("temperature") + "&deg;C"
                + "<br />" + event.feature.getProperty("weather")
            );
            infowindow.setOptions({
                position: {
                    lat: event.latLng.lat(),
                    lng: event.latLng.lng()
                },
                pixelOffset: {
                    width: 0,
                    height: -15
                }
            });
            infowindow.open(map);
        });
    }

    /** creation du marqueurs **/
    var creationmarker = function (place, bounds) {
        if (!place.geometry) {
            console.log("Returned place contains no geometry");
            return;
        }

        var icon = {
            url: place.icon,
            size: new google.maps.Size(71, 71),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(17, 34),
            scaledSize: new google.maps.Size(25, 25)
        };

        /** créer un marqueur pour chaque place **/
        marker = new google.maps.Marker({
            map: map,
            icon: icon,
            title: place.name +
            '\n' + place.formatted_address,
            position: place.geometry.location,
            id: place.id
        });

        /** ajoute ce marqueur à notre conteneur de marqueurs **/
        marker.addListener('click', function () {
            var nom = place.name;
            var adresse = place.formatted_address;
            var tel = place.formatted_phone_number;
            var note = place.rating;

            infowindow.setContent([
                nom,
                adresse,
                'tel : ' + tel,
                'note : ' + note].join("<br />"));

            infowindow.setOptions({
                position: place.geometry.location,
                pixelOffset: {
                    width: 0,
                    height: -15
                }
            });
            infowindow.open(map, this);
        })

        /** Ajoute le marqueur à la liste des marqueurs **/
        markers.push(marker);

        if (place.geometry.viewport) {
            // Only geocodes have viewport.
            bounds.union(place.geometry.viewport);
        } else {
            bounds.extend(place.geometry.location);
        }
    }

    /*** first version with affichage meteo image
     *   It's current meteo ***/
    var checkIfDataRequested = function () {
        // Stop extra requests being sent

        while (gettingData === true) {
            request.abort();
            gettingData = false;
        }
        getCoords();
    };
    // Get the coordinates from the Map bounds
    var getCoords = function () {
        var bounds = map.getBounds();
        var NE = bounds.getNorthEast();
        var SW = bounds.getSouthWest();
        getWeather(NE.lat(), NE.lng(), SW.lat(), SW.lng());
    };
    // Make the weather request
    var getWeather = function (northLat, eastLng, southLat, westLng) {
        gettingData = true;

        var requestString = "http://api.openweathermap.org/data/2.5/box/city?bbox="
            + westLng + "," + northLat + "," //left top
            + eastLng + "," + southLat + "," //right bottom
            + map.getZoom()
            + "&cluster=yes&format=json"
            + "&APPID=" + openWeatherMapKey;

        request = new XMLHttpRequest();
        request.onload = proccessResults;
        request.open("get", requestString, true);
        request.send();
    };

    // Take the JSON results and proccess them
    var proccessResults = function () {
        //console.log(this);
        var results = JSON.parse(this.responseText);
        if (results.list.length > 0) {
            resetData();
            for (var i = 0; i < results.list.length; i++) {
                geoJSON.features.push(jsonToGeoJson(results.list[i]));
            }
            drawIcons(geoJSON);
        }
    };

    var infowindow = new google.maps.InfoWindow();

    // For each result that comes back, convert the data to geoJSON
    var jsonToGeoJson = function (weatherItem) {
        var feature = {
            type: "Feature",
            properties: {
                city: weatherItem.name,
                weather: weatherItem.weather[0].main,
                temperature: weatherItem.main.temp,
                min: weatherItem.main.temp_min,
                max: weatherItem.main.temp_max,
                humidity: weatherItem.main.humidity,
                pressure: weatherItem.main.pressure,
                windSpeed: weatherItem.wind.speed,
                windDegrees: weatherItem.wind.deg,
                windGust: weatherItem.wind.gust,
                icon: "http://openweathermap.org/img/w/"
                + weatherItem.weather[0].icon + ".png",
                coordinates: [weatherItem.coord.Lon, weatherItem.coord.Lat]
            },
            geometry: {
                type: "Point",
                coordinates: [weatherItem.coord.Lon, weatherItem.coord.Lat]
            }
        };
        // Set the custom marker icon
        map.data.setStyle(function (feature) {
            return {
                icon: {
                    url: feature.getProperty('icon'),
                    anchor: new google.maps.Point(25, 25)
                }
            };
        });
        // returns object
        return feature;
    };

    // Add the markers to the map
    var drawIcons = function (weather) {
        map.data.addGeoJson(geoJSON);
        // Set the flag to finished
        gettingData = false;
    };

    // Clear data layer and geoJSON
    var resetData = function () {
        geoJSON = {
            type: "FeatureCollection",
            features: []
        };
        map.data.forEach(function (feature) {
            map.data.remove(feature);
        });
    };

    google.maps.event.addDomListener(window, 'load', initAutocomplete());
